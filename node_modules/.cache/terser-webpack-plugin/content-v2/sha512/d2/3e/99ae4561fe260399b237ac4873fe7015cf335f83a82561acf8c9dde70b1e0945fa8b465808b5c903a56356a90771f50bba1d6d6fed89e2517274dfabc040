{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{491:function(e,a,s){\"use strict\";s.r(a);var _=s(18),t=Object(_.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"你需要知道的一些索引基础知识\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#你需要知道的一些索引基础知识\"}},[e._v(\"#\")]),e._v(\" 你需要知道的一些索引基础知识\")]),e._v(\" \"),s(\"p\",[e._v(\"对于高级开发，我们经常要编写一些复杂的sql，那么防止写出低效sql，我们有必要了解一些索引的基础知识。通过这些基础知识我们可以写出更高效的sql。\")]),e._v(\" \"),s(\"h3\",{attrs:{id:\"一-索引的优点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一-索引的优点\"}},[e._v(\"#\")]),e._v(\" 一. 索引的优点\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[e._v(\"大大减少服务器需要扫描的数据量，也就是IO量\")]),e._v(\" \"),s(\"li\",[e._v(\"帮助服务器避免排序和临时表（尽量避免文件排序，而是使用索引排序）\")]),e._v(\" \"),s(\"li\",[e._v(\"将随机IO变成顺序IO\")])]),e._v(\" \"),s(\"h3\",{attrs:{id:\"二-索引的用处\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二-索引的用处\"}},[e._v(\"#\")]),e._v(\" 二. 索引的用处\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[e._v(\"快速查找匹配where子句中的行\")]),e._v(\" \"),s(\"li\",[e._v(\"如果可以在多个索引中选择，mysql通常会使用找到最少行的索引\")]),e._v(\" \"),s(\"li\",[e._v(\"如果表具有多列索引，则优化器可以使用索引的任何最左前缀来查找行\")]),e._v(\" \"),s(\"li\",[e._v(\"当有表连接的时候，从其他表检索行数据\")]),e._v(\" \"),s(\"li\",[e._v(\"查找特定索引列的min和max的值\")]),e._v(\" \"),s(\"li\",[e._v(\"如果排序或者分组时可用索引的最左前缀完成的，则对表进行排序和分组\")]),e._v(\" \"),s(\"li\",[e._v(\"在某些情况下，可以优化查询以检索数据值而无需查找数据行\")])]),e._v(\" \"),s(\"h3\",{attrs:{id:\"三-索引的分类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三-索引的分类\"}},[e._v(\"#\")]),e._v(\" 三. 索引的分类\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"数据库默认建立的索引是给唯一键建立的\")])]),e._v(\" \"),s(\"ul\",[s(\"li\",[e._v(\"主键索引(唯一且非空)\")]),e._v(\" \"),s(\"li\",[e._v(\"唯一索引(唯一可为空)\")]),e._v(\" \"),s(\"li\",[e._v(\"普通索引(普通字段的索引)\")]),e._v(\" \"),s(\"li\",[e._v(\"全文索引(一般是varchar,char,text类型建立的，但很少用)\")]),e._v(\" \"),s(\"li\",[e._v(\"组合索引(多个字的建立的索引)\")])]),e._v(\" \"),s(\"h3\",{attrs:{id:\"四-技术名词\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四-技术名词\"}},[e._v(\"#\")]),e._v(\" 四. 技术名词\")]),e._v(\" \"),s(\"h4\",{attrs:{id:\"_1-回表\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-回表\"}},[e._v(\"#\")]),e._v(\" 1. 回表\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"name字段是普通索引，从name列的B+树找到主键，再从主键的B+树找到最终的数据，这就是回表。(主键索引的叶子节点保存的是列的所有数据，但是普通所有的叶子结点保存的是对应的主键ID）\")])]),e._v(\" \"),s(\"p\",[e._v(\"如图：一个use表中name建立的索引\")]),e._v(\" \"),s(\"p\",[e._v(\"sql是 \"),s(\"code\",[e._v(\"select * from use where name='sun'\")])]),e._v(\" \"),s(\"p\",[e._v(\"首先会通过name这个非主键索引找到sun对应的主键Id=2,然后通过id=2在主键索引中找到整个行数据，并返回，这个就是回表。\")]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-return-table.png\",width:\"50%\"}}),e._v(\" \"),s(\"h4\",{attrs:{id:\"_2-覆盖索引\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-覆盖索引\"}},[e._v(\"#\")]),e._v(\" 2. 覆盖索引\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"在非主键索引上可以查询到所需要的字段，不需要回表再次查询就叫覆盖索引。\")])]),e._v(\" \"),s(\"p\",[e._v(\"如上图name索引，sql是\"),s(\"code\",[e._v(\"select id,name from user where name =1\")]),e._v(\" ，id的值在第一步非主键索引就已经有了，就不需要根据ID到主键索引中查询行数据了\")]),e._v(\" \"),s(\"h4\",{attrs:{id:\"_3-最左匹配\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-最左匹配\"}},[e._v(\"#\")]),e._v(\" 3. 最左匹配\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"组合索引中 先匹配左边，在继续向后匹配； 比如user表中有name+age组成的联合索引，select * from user where name='纪先生' and age = 18 就符合最左匹配，可以用的索引。而select * from user where age = 18就不符合，用不到这个索引。\")])]),e._v(\" \"),s(\"p\",[e._v(\"扩展；\")]),e._v(\" \"),s(\"p\",[e._v(\"如果是下面两个sql怎么建立索引\")]),e._v(\" \"),s(\"p\",[s(\"code\",[e._v(\"select * from user where name='' and age = 18\")])]),e._v(\" \"),s(\"p\",[s(\"code\",[e._v(\"select * from user where age = 18\")])]),e._v(\" \"),s(\"p\",[e._v(\"由于最左匹配原则：只需要建立一个组合索引age+name即可\")]),e._v(\" \"),s(\"p\",[e._v(\"如果是下面三个sql呢\")]),e._v(\" \"),s(\"p\",[s(\"code\",[e._v(\"select * from user where name='纪先生' and age = 18\")])]),e._v(\" \"),s(\"p\",[s(\"code\",[e._v(\"select * from user where age = 18\")])]),e._v(\" \"),s(\"p\",[s(\"code\",[e._v(\"select * from user where name= '纪先生'\")])]),e._v(\" \"),s(\"p\",[e._v(\"建立name+age和age索引，或者建立age+name和name索引\")]),e._v(\" \"),s(\"p\",[e._v(\"看着两个都可以，其实name+age和age更好，因为索引也是需要持久化存储的，占用磁盘空间，读取的时候也是占用内存的，name+age和age+name这两个占用是一样的，但是name和age单独比较，肯定age占用空间更少，name更长（索引越大，IO次数可能更多）\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"注意：在看很多文章的时候，经常看到一些对于最左匹配错误的举例：\")]),e._v(\" \"),s(\"p\",[e._v(\"索引是name+age，sql是\"),s(\"code\",[e._v(\"select * from user where age = 18 and name='纪先生'\")])]),e._v(\" \"),s(\"p\",[e._v(\"很多人认为这种是不能走索引，实际上可以的。mysql的优化器会优化的，调整成name='纪先生'  and  age = 18\")])]),e._v(\" \"),s(\"h4\",{attrs:{id:\"_4-索引下推\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-索引下推\"}},[e._v(\"#\")]),e._v(\" 4. 索引下推\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"组合索引中尽量利用索引信息，来尽可能的减少回表的次数\")])]),e._v(\" \"),s(\"p\",[e._v(\"案例：还是 name+age的组合索引\")]),e._v(\" \"),s(\"p\",[e._v(\"如果没有索引下推的查询是 在组合索引中通过name查询所有匹配的数据，然后回表根据ID查询对于的数据行，之后在筛选出符合age条件的数据。\")]),e._v(\" \"),s(\"p\",[e._v(\"索引下推就是组合索引中通过name查询匹配再根据age找到符合的数据ID，然后回表根据ID查询对应行数据，明显会减少数据的条数。\")]),e._v(\" \"),s(\"h3\",{attrs:{id:\"五-索引匹配方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五-索引匹配方式\"}},[e._v(\"#\")]),e._v(\" 五. 索引匹配方式\")]),e._v(\" \"),s(\"p\",[e._v(\"mysql官网准备了一些学习测试的数据库，可以直接下载通过source导入到我们自己的数据库\")]),e._v(\" \"),s(\"p\",[e._v(\"官网地址：https://dev.mysql.com/doc/index-other.html\")]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-index-other.png\"}}),e._v(\" \"),s(\"p\",[e._v(\"下载zip,\\t其中包含了sakila-schema.sql和sakila-data.sql\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"mysql> source /Users/ajisun/Downloads/sakila-db/sakila-schema.sql;\")])]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"mysql> source /Users/ajisun/Downloads/sakila-db/sakila-data.sql;\")])]),e._v(\" \"),s(\"p\",[e._v(\"需要通过explain来查看索引的执行情况，执行计划以前有文章详细讲过，具体参考执行计划explain\")]),e._v(\" \"),s(\"h4\",{attrs:{id:\"_1-全值匹配\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-全值匹配\"}},[e._v(\"#\")]),e._v(\" 1. 全值匹配\")]),e._v(\" \"),s(\"p\",[e._v(\"指和某个索引中的所有列进行匹配，例如使用数据库sakila中的staff表\")]),e._v(\" \"),s(\"p\",[e._v(\"新建一个三个字段的联合索引：\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"mysql> alter table staff add index index_n1(first_name,last_name,username);\")])]),e._v(\" \"),s(\"p\",[e._v(\"执行sql:\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"mysql> explain select * from staff where first_name='Mike' and last_name='Hillyer' and username='Mike'\")])]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-all-value-index.png\"}}),e._v(\" \"),s(\"p\",[e._v(\"其中的ref是三个const， 用到三个字段，能匹配一条数据\")]),e._v(\" \"),s(\"h4\",{attrs:{id:\"_2-最左前缀匹配\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-最左前缀匹配\"}},[e._v(\"#\")]),e._v(\" 2. 最左前缀匹配\")]),e._v(\" \"),s(\"p\",[e._v(\"只匹配组合索引中前面几个字段\")]),e._v(\" \"),s(\"p\",[e._v(\"执行sql:\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"explain select * from staff where first_name='Mike' and last_name='Hillyer';\")])]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-last-left-index.png\"}}),e._v(\" \"),s(\"p\",[e._v(\"ref只出现2个const,比上面全值匹配少一个，就只匹配了前面两个字段\")]),e._v(\" \"),s(\"h4\",{attrs:{id:\"_3-匹配列前缀\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-匹配列前缀\"}},[e._v(\"#\")]),e._v(\" 3. 匹配列前缀\")]),e._v(\" \"),s(\"p\",[e._v(\"可以匹配某一列的的开头部分，像like属性\")]),e._v(\" \"),s(\"p\",[e._v(\"执行sql:\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"explain select * from staff where first_name like 'Mi%';\")])]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-prefix-index.png\"}}),e._v(\" \"),s(\"p\",[e._v(\"type=range ,是个范围查询，可以匹配一个字段的一部分，而不需要全值匹配\")]),e._v(\" \"),s(\"p\",[e._v(\"如果有模糊匹配的字段不要放在索引的最前面，否则有索引也不能使用，如下\")]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-like-index.png\"}}),e._v(\" \"),s(\"h4\",{attrs:{id:\"_4-匹配一个范围值\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-匹配一个范围值\"}},[e._v(\"#\")]),e._v(\" 4. 匹配一个范围值\")]),e._v(\" \"),s(\"p\",[e._v(\"可以查找某一个范围的数据\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"explain select * from staff where first_name > 'Mike';\")])]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-range-index.png\"}}),e._v(\" \"),s(\"h4\",{attrs:{id:\"_5-精确匹配某一列并范围匹配另一列\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-精确匹配某一列并范围匹配另一列\"}},[e._v(\"#\")]),e._v(\" 5. 精确匹配某一列并范围匹配另一列\")]),e._v(\" \"),s(\"p\",[e._v(\"可以查询第一列的全部和另一列的部分\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"explain select * from staff where first_name = 'Mike' and last_name like 'Hill%';\")])]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-all-like-index.png\"}}),e._v(\" \"),s(\"h4\",{attrs:{id:\"_6-只访问索引的查询\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-只访问索引的查询\"}},[e._v(\"#\")]),e._v(\" 6. 只访问索引的查询\")]),e._v(\" \"),s(\"p\",[e._v(\"查询的时候只需要访问索引，不需要访问数据行，其实就是索引覆盖\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"explain select first_name,last_name,username from staff where first_name='Mike' and last_name='Hillyer';\")])]),e._v(\" \"),s(\"img\",{attrs:{src:\"https://cdn.jsdelivr.net/gh/AJiSun/CDN/mysql-plus/8-only-index.png\"}}),e._v(\" \"),s(\"p\",[e._v(\"extra=Using index 说明是使用了索引覆盖，不需要再次回表查询\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"其实一张表中有索引并不总是最好的。总的来说，只有当索引帮助存储引擎快速提高查找到记录带来的好处大于其带来的额外工作时，索引才是有效的。对应很小的表，大部分情况下没有索引，全表扫描更高效；对应中大型表，索引时非常有效的；但是对于超大的表，索引的建立和使用代价也就非常高，一般需要单独处理特大型的表，例如分区，分库，分表等。\")])])])}),[],!1,null,null,null);a.default=t.exports}}]);","extractedComments":[]}